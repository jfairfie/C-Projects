#include "bst.h"
#include <string>
#include <iostream>
/**
    * Add the item to this binary search tree as long as it
    * is not already present.
    * Return false if item is already  in the tree.
    * Return true if item is actually added to the tree.
    */
template <class T>
bool binary_search_tree<T>::insert(const T &item) {
//Please implement this function.
	if (root == NULL) {
		root = new binary_tree_node<T>(item);  
		return true; 
	} 

	binary_tree_node<T> *parent = NULL; 
	binary_tree_node<T> *current = root;
	
	while(current != NULL) {
		if(item < current->data()) {
			parent = current; 
			current = current->left(); 
		} else if (item > current->data()) {
			parent = current;
			current = current->right(); 
		} else {
			return false; 
		}

	}
	
	if (item < parent->data()) {
		parent->left() = new binary_tree_node<T>(item); 
	} else {
		parent->right() = new binary_tree_node<T>(item); 
	}	
	return true; 
}

/* 
 * the target value removed -> return true
 * if not -> return false
 */
template <class Item>
bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target) {
	if (root_ptr == NULL) {
		return false; 
	}

	binary_tree_node<Item>* current = root_ptr;
	binary_tree_node<Item>* parent = NULL; 
	
	while (current != NULL) {
		if (target < current->data()) {
			parent = current; 
			current = current->left(); 
		} else if (target > current->data()) {
			parent = current; 
			current = current->right(); 
		} else if (target == current->data()) {
			break; 
		} else {
			return false; 
		}
	}

	//If the node has no children 
	if (current->right() == NULL && current->left() == NULL) {
		if (parent->left()->data() == target) {
			parent->left() = NULL; 
		} else {
			parent->right() = NULL; 
		}
		return true; 
	}

	//If the node on one side is NULL
	if (current->left() == NULL) {
		if (parent->left()->data() == current->data()) {
			parent->left() = current->right(); 
		} else {
			parent->right() = current->right(); 
		}
		return true; 
	} else if (parent->right() == NULL){
		if (parent->left()->data() == current->data()) {
			parent->left() = current->left(); 
		} else {
			parent->right() = current->left(); 
		}
		return true; 
	}

	//If there are both right and left children 
	binary_tree_node<Item>* temp = current->right(); 
	if (current->left() != NULL && current->right() != NULL) {
		//Finding the minimum value 
		while(temp->left() != NULL) {
			temp = temp->left();
		}

		//Current acts as a parent
		if (current->right() == temp) {
			current->right() = NULL; 
		} else {
			current->left() = NULL; 
		}
		
		//Temp Changes its data to the minimum value
		if (parent->right() == current) {
			parent->right()->data() = temp->data(); 
		} else {
			parent->left()->data() = temp->data(); 
		}
		
	}
	return true; 	
}

template <class Item>
void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed) {
//Please implement this function.
	if (root_ptr == NULL) {
		return; 
	}
	
	binary_tree_node<Item> *oldroot_ptr;
	if (root_ptr->right( ) != NULL) {
       bst_remove_max(root_ptr->right( ), removed);
    } else {
       removed = root_ptr->data( );
       oldroot_ptr = root_ptr;
       root_ptr = root_ptr->left( );
       delete oldroot_ptr;
	}
}

template <class T>
bool binary_search_tree<T>::remove(const T &item) {
    return bst_remove(root, item);
}

template <class T>
void binary_search_tree<T>::print_ordered_list() {
	bst_inOrder(root); 
}

template <class Item>
void bst_inOrder(binary_tree_node<Item>* root) {
	if (root != NULL) {
		bst_inOrder(root->left()); 
		std::cout << root->data() << " "; 
		bst_inOrder(root->right()); 
	}
}

template <class T>
binary_tree_node<T> *binary_search_tree<T>::search(const T &key) const {
    binary_tree_node<T> *p = root;
    while(p != NULL && p->data() != key) {
        if(key < p->data())
            p = p->left();
        else
            p = p->right();
    }
}


template <class T>
binary_search_tree<T>::~binary_search_tree() {
    tree_clear(root);
}



/**
 * return the depth of the tree if the tree is balanced.
 * Return -2 if not. Return -1 if it is an empty tree.
 */
template <class T>
int check_balanced(binary_tree_node<T> *root) {
    if(root == NULL)
        return  -1;
    else {
        int ibl = check_balanced(root->left());
        if(ibl == -2)
            return -2;
        int ibr = check_balanced(root->right());
        if(ibr == -2)
            return -2;
        if(abs(ibr-ibl) > 1)
            return -2;
        if(ibr > ibl)
            return ibr+1;
        else
            return  ibl+1;
    }
}


/**
    * return the depth of the tree if the tree is balanced.
    * Return -2 if not.
    */
template <class T>
int  binary_search_tree<T>::is_balanced() {
    return check_balanced(root);
}

template <class T>
std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root) {
    if(root != NULL) {
        out << "[";
        out << root->left() << " ";
        out << root->data();
        out << " " << root->right();
        out << "]";
    }
    return out;
}



template <class T>
std::ostream &operator<<(std::ostream &out, const binary_search_tree<T> &tree) {
    out << tree.root;
    return out;
}