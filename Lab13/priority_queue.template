#include "heap.h"

template <typename T> 
heap<T> h;

template <typename T> 
priority_queue<T>::priority_queue() {
	
}
// postcondition: empty priority_queue has been created

template <typename T> 
void priority_queue<T>::pop() {
	if (empty() == true) {
		return; 
	}
	h.remove(); 
}
// precondition: priority_queue is not emtpy
// postcondition: highest priority item has been removed

template <typename T> 
void priority_queue<T>::push(const T& item) {
	h.insert(item); 
}
// postcondition: item has been inserted
	
template <typename T>
bool priority_queue<T>::empty() const {
	return h.is_empty(); 
}
// postcondition: returned whether priority queue is empty
	
template <typename T>
unsigned int priority_queue<T>::size() const {
	return h.size(); 
}
// postcondition: returned number of items in the priority queue
	
template <typename T>
T priority_queue<T>::top() const {
	if (empty()) {
		return NULL; 
	}

	return h.max(); 
}
// precondition: priority queue is not empty
// postcondition: copy of highest priority item has been returned